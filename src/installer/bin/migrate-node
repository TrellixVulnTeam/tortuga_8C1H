#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# pylint: disable=no-member

from tortuga.cli.tortugaCli import TortugaCli
from tortuga.exceptions.invalidCliRequest import InvalidCliRequest
from tortuga.node.nodeApiFactory import getNodeApi


class MigrateNodeCli(TortugaCli):
    def __init__(self):
        super(MigrateNodeCli, self).__init__()

        optionGroupName = _('Migrate Node Options')

        self.addOptionGroup(optionGroupName, '')

        self.addOptionToGroup(
            optionGroupName, '--node',
            dest='nodeName',
            help=_('Name of node to migrate'))

        self.addOptionToGroup(
            optionGroupName, '--destination',
            dest='destinationString',
            help=_('List of nodes which can be the destination'))

        self.addOptionToGroup(
            optionGroupName, '--with-shutdown',
            dest='liveMigrate',
            action='store_false',
            default=True,
            help=_('Migrate by shutting down/restarting node'))

    def runCommand(self):
        self.parseArgs(_("""
    migrate-node --node=NODENAME --destination=PARENT[,PARENT] [--with-shutdown]

Description:
    The migrate-node tool migrates a node from one parent
    node to another.

    NOTE: Both the resource adapter and the storage adapter for
    the given node must support this operation.
"""))

        if not self.getOptions().nodeName:
            raise InvalidCliRequest(_('Node name must be specified'))

        if not self.getOptions().destinationString:
            raise InvalidCliRequest(_('Destination must be specified'))

        nodeName = self.getOptions().nodeName
        destinationString = self.getOptions().destinationString

        try:
            nodeApi = getNodeApi(self.getUsername(), self.getPassword())
        except Exception as msg:
            raise InvalidCliRequest(
                _("Can't migrate node [{0}] - {1}").format(nodeName, msg))

        try:
            # Turn user input into a list
            destinationList = [
                node for node in destinationString.split(',')]

            nodeApi.migrateNode(
                nodeName, destinationList, self.getOptions().liveMigrate)

            print(_('Migrated node [%s]') % (nodeName))

        except Exception as msg:
            raise InvalidCliRequest(
                _("Can't migrate node [{0}] - {1}").format(nodeName, msg))


if __name__ == '__main__':
    MigrateNodeCli().run()

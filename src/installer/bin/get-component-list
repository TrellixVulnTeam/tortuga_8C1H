#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

from tortuga.cli.tortugaCli import TortugaCli
from tortuga.kit.kitApiFactory import getKitApi
from tortuga.softwareprofile import softwareProfileFactory
from tortuga.node import nodeApiFactory
from tortuga.helper.osHelper import getOsInfo


def displayComponent(c, kit):
    # Depends on the __repr__ of Component and Kit objects
    print('%s %s' % (kit, c))


class GetComponentList(TortugaCli):
    def __init__(self):
        super(GetComponentList, self).__init__()

        optGroup = 'Options'

        self.addOptionGroup(optGroup, '')

        self.addOptionToGroup(
            optGroup, '--software-profile',
            dest='softwareprofile',
            metavar='SOFTWAREPROFILENAME',
            default=None,
            help=(_('Display list of components enabled in software'
                    ' profile.')))

        self.addOptionToGroup(
            optGroup,
            '-p',
            dest='applyToInstaller', action='store_true',
            default=False,
            help=_('Display components enabled on installer only')
        )

        self.addOptionToGroup(optGroup, '--os', dest='os', type='str',
                              metavar='NAME-VERSION-ARCH',
                              help=_('Display components suitable for'
                                     ' specified OS only'))

    def __get_software_profile(self):
        # Determine software profile name based on command-line option(s)

        if self.getArgs().applyToInstaller:
            # Get software profile name from installer node
            node = nodeApiFactory.getNodeApi().getInstallerNode(
                optionDict={
                    'softwareprofile': True,
                }
            )

            return node.getSoftwareProfile().getName()

        return self.getArgs().softwareprofile

    def runCommand(self):
        self.parseArgs(_("""
    get-component-list [--software-profile=SOFTWAREPROFILENAME | -p] | [--os=NAME-VERSION-ARCH]

Description:
    The get-component list tool returns the list of components  available
    for  software  profiles in the system.  The option '--software-profile'
    instructs the tool to return the list  of  enabled  components  in  a
    given software profile.  The option '-p' displays components enabled only
    on the installer.

    When '--os' option is provided, only components suitable for the specified
    operating system will be displayed.
"""))

        # Check for conflicting options
        if self.getArgs().softwareprofile and self.getArgs().os or \
                self.getArgs().applyToInstaller and self.getArgs().os:
            self.getParser().error('Options -p, --software-profile and --os'
                                   ' are mutually exclusive')

        softwareProfileName = self.__get_software_profile()

        if softwareProfileName:
            # Display all components enabled for software profile

            for c in softwareProfileFactory.getSoftwareProfileApi().\
                    getEnabledComponentList(softwareProfileName):
                displayComponent(c, c.getKit())

            return

        if self.getArgs().os:
            try:
                name, version, arch = self.getArgs().os.split('-', 3)
            except ValueError:
                self.getParser().error(
                    'Malformed argument to --os. Must be in form of'
                    ' NAME-VERSION-ARCH')

            osinfo = getOsInfo(name, version, arch)
        else:
            osinfo = None

        # Display all components
        for kit in getKitApi(
                self.getUsername(), self.getPassword()).getKitList():
            for c in kit.getComponentList():
                if osinfo and osinfo not in c.getOsInfoList() and \
                        osinfo.getOsFamilyInfo() not in c.getOsFamilyInfoList():
                    # If osinfo is defined, exclude those components that
                    # cannot be enabled on the specified operating system.
                    continue

                displayComponent(c, kit)


if __name__ == "__main__":
    GetComponentList().run()

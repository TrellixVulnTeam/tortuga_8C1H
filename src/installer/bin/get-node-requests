#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member


import sys
import json
from tortuga.cli.tortugaCli import TortugaCli
from tortuga.db.dbManager import DbManager
from tortuga.db.nodesDbHandler import NodesDbHandler
from tortuga.db.nodeRequestsDbHandler import NodeRequestsDbHandler


class GetNodeRequestsCli(TortugaCli):
    def __init__(self):
        super(GetNodeRequestsCli, self).__init__()

        self.addOption('--request-id', '-r')

        self._nodeRequestsDbHandler = NodeRequestsDbHandler()

    def runCommand(self):
        self.parseArgs()

        if self.getArgs().request_id:
            self._get_node_request(self.getArgs().request_id)

            raise SystemExit(0)

        session = DbManager().openSession()

        try:
            for nr in self._nodeRequestsDbHandler.get_all(session):
                self.__display_node_request(nr)
        finally:
            DbManager().closeSession()

    def __display_node_request(self, nr): \
            # pylint: disable=no-self-use
        print(nr.addHostSession, nr.timestamp, nr.state, nr.action)

        if nr.state == 'error':
            print('    ' + nr.message)
        else:
            print()

    def _get_node_request(self, request_id):
        session = DbManager().openSession()

        try:
            node_request = \
                self._nodeRequestsDbHandler.get_by_addHostSession(
                    session, request_id)

            if not node_request:
                # Check for node
                nodes = NodesDbHandler().getNodesByAddHostSession(
                    session, request_id)

                if nodes:
                    sys.stdout.write(
                        'The following nodes were added successfully by'
                        ' this request:\n%s' % (
                            '\n'.join(get_node_names(nodes))) + '\n')
                    sys.stdout.flush()

                    sys.exit(0)
                else:
                    sys.stderr.write(
                        'Error: node request [{0}] does not exist or'
                        ' is invalid.\n'.format(request_id))

                sys.exit(1)

            request = json.loads(node_request.request)

            if node_request.state == 'error':
                msg = ('Error attempting to add {0} node(s) to hardware'
                       ' profile [{1}]'.format(
                           request['count'], request['hardwareProfile']))

                print(msg)

                print('Reported:', node_request.message)
            else:
                self.__display_node_request(node_request)
        finally:
            DbManager().closeSession()


def get_node_names(nodes):
    return [node.name for node in nodes]


if __name__ == '__main__':
    GetNodeRequestsCli().run()

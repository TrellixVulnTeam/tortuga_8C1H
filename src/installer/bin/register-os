#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

import os.path

import sqlalchemy
import sqlalchemy.orm.exc
from sqlalchemy import and_

from tortuga.db.dbManager import DbManager
from tortuga.db.models.operatingSystem import OperatingSystem
from tortuga.db.models.operatingSystemFamily import OperatingSystemFamily
from tortuga.db.models.kit import Kit
from tortuga.db.models.component import Component
from tortuga.config.configManager import ConfigManager
from tortuga.cli.tortugaCli import TortugaCli
from tortuga.helper import osHelper
from tortuga.exceptions.osNotSupported import OsNotSupported
from tortuga.objects.osInfo import OsInfo
from tortuga.objects.osFamilyInfo import OsFamilyInfo


class RegisterOs(TortugaCli):
    def __init__(self):
        super(RegisterOs, self).__init__()

        self.addOption('--os',
                       help='Operating system spec (name-version-arch) to'
                       ' register')
        self.addOption('--os-family',
                       help='Override default operating system family'
                            ' detection')

    def create_os_db_entries(self, osinfo): \
            # pylint: disable=no-self-use
        session = DbManager().openSession()

        try:
            # Check if operating system is already registered

            os_exists = None

            try:
                operating_system = session.query(OperatingSystem).filter(
                    and_(OperatingSystem.name == osinfo.getName(),
                         OperatingSystem.version == osinfo.getVersion()
                         )).one()

                # print '[debug] found operating system: %s' % (
                #     operating_system)

                os_exists = True
            except sqlalchemy.orm.exc.NoResultFound:
                os_exists = False

            if not os_exists:
                # print ('[debug] creating OperatingSystems entry for'
                #        ' \'coreos\'')

                operating_system = OperatingSystem(
                    osinfo.getName(), osinfo.getVersion(), osinfo.getArch())

                operating_system.family = OperatingSystemFamily(
                    osinfo.getName(), osinfo.getVersion(), osinfo.getArch())

                session.add(operating_system)

            # Find operating system kit
            os_kit_exists = None

            try:
                os_kit = session.query(Kit).filter(
                    sqlalchemy.and_(Kit.name == operating_system.name,
                                    Kit.version == operating_system.version,
                                    Kit.isOs == True)).one()  # noqa

                os_kit_exists = True
            except sqlalchemy.orm.exc.NoResultFound:
                os_kit_exists = False

            if not os_kit_exists:
                os_kit = Kit(name=osinfo.getName(),
                             version=osinfo.getVersion(),
                             iteration='0',
                             isOs=True)

                os_component = Component()
                os_component.name = '%s-%s-%s' % (
                    osinfo.getName(),
                    operating_system.version,
                    operating_system.arch)
                os_component.version = osinfo.getVersion()
                os_component.os.append(operating_system)

                # Add component to kit
                os_kit.components.append(os_component)

                # Add kit to database session
                session.add(os_kit)

            session.commit()

        finally:
            DbManager().closeSession()

    def create_repo_conf_entry(self, osinfo): \
            # pylint: disable=no-self-use
        """
        For non-natively supported operating systems, it is necessary to
        create an entry in repo.conf so that kits will enable components for
        operating systems other than the native OS
        """

        with open(os.path.join(ConfigManager().getKitConfigBase(),
                               'repo.conf'), 'a') as fp:
            fp.write('''
[%s__%s__%s]
enabled=true
''' % (osinfo.getName(), osinfo.getVersion(), osinfo.getArch()))

    def runCommand(self):
        self.parseArgs()

        os_name, os_version, os_arch = self.getOptions().os.rsplit('-', 2)

        # print os_name, os_version, os_arch

        try:
            osinfo = osHelper.getOsInfo(os_name, os_version, os_arch)
        except OsNotSupported:
            # Set the operating system family to the same as the operating
            # system, unless specified on the command-line.

            osinfo = OsInfo(os_name, os_version, os_arch)

        if self.getOptions().os_family:
            os_family_name, os_family_version, os_family_arch = \
                self.getOptions().os_family.rsplit('-', 2)
        else:
            os_family_name = os_name
            os_family_version = os_version
            os_family_arch = os_arch

        os_family_info = OsFamilyInfo(
            os_family_name, os_family_version, os_family_arch)

        osinfo.setOsFamilyInfo(os_family_info)

        self.create_os_db_entries(osinfo)

        self.create_repo_conf_entry(osinfo)


if __name__ == '__main__':
    RegisterOs().run()

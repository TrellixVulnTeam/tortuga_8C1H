#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Command-line utility for manipulating the Tortuga global parameters
database
"""

__author__ = 'Univa <support@univa.com>'

import sys
import argparse

from tortuga.db.globalParameterDbApi import GlobalParameterDbApi
from tortuga.objects.parameter import Parameter
from tortuga.exceptions.parameterNotFound import ParameterNotFound


class UcParam(object): \
        # pylint: disable=too-few-public-methods
    """
    Application class
    """

    def __init__(self):
        self.__parameter_api = GlobalParameterDbApi()

        self.parser = None

    def run(self):
        """Main entry point"""

        self.parser = argparse.ArgumentParser(prog='ucparam')

        self.parser.add_argument('--debug', action='store_true',
                                 help='Enable debug logging')
        self.parser.add_argument('--verbose', action='store_true',
                                 help='Enable verbose logging')

        subparsers = self.parser.add_subparsers()

        # Initialize 'get' subparser
        parser_get = subparsers.add_parser('get')
        parser_get.set_defaults(subcommand='get')

        parser_get.add_argument('name')

        # Initialize 'set' subparser
        parser_set = subparsers.add_parser('set')
        parser_set.set_defaults(subcommand='set')

        parser_set.add_argument('name', nargs='?', metavar='name')
        parser_set.add_argument('value', nargs='?', metavar='value')

        # Initialize 'delete' subparser
        parser_delete = subparsers.add_parser('delete')
        parser_delete.set_defaults(subcommand='delete')

        parser_delete.add_argument('name')

        # Initialize 'list' subparser
        parser_list = subparsers.add_parser(
            'list', help='List all Tortuga parameters')
        parser_list.set_defaults(subcommand='list')

        # Initialize 'export' subparser
        parser_export = subparsers.add_parser(
            'export', help='Export all user-defined parameters')
        parser_export.set_defaults(subcommand='export')

        # Finally parse the args
        args = self.parser.parse_args()

        if hasattr(args, 'subcommand'):
            action = args.subcommand.lower()

            if action == 'get':
                self.__get_action(args.name)
            elif action == 'set':
                self.__set_action(parser_set, args.name, args.value)
            elif action == 'delete':
                self.__delete_action(args.name)
            elif action == 'list':
                self.__list_action()
            elif action == 'export':
                self.__export_action()

    def __get_action(self, name):
        """
        Retrieve parameters from database
        """

        try:
            print(self.__parameter_api.getParameter(name).getValue())
        except ParameterNotFound:
            sys.exit(1)

    def __set_parameter(self, name, value):
        try:
            self.__parameter_api.deleteParameter(name)
        except ParameterNotFound:
            pass

        self.__parameter_api.addParameter(
            Parameter(name=name, value=value))

    def __set_action(self, parser, name, value):
        """
        Set parameters
        """

        if name is None and value is None:
            if not sys.stdin.isatty():
                lineno = 0

                for entry in sys.stdin.readlines():
                    lineno += 1

                    if entry.startswith('#'):
                        continue

                    try:
                        name, value = entry.rstrip().split(' ', 1)

                        self.__set_parameter(name, value.lstrip())
                    except ValueError:
                        sys.stderr.write(
                            'Ignoring malformed line #%d\n' % (lineno))

                return
            else:
                parser.print_help()

                sys.exit(1)

        if value is None:
            parser.error('Value must be specified for name [%s]' % (name))

        self.__set_parameter(name, value)

    def __delete_action(self, name):
        """
        Delete parameter
        """

        self.__parameter_api.deleteParameter(name)

    def __list_action(self):
        """
        List all parameters
        """

        for item in self.__parameter_api.getParameterList():
            print('%s: %s' % (item.getName(), item.getValue()))

    def __export_action(self):
        for item in self.__parameter_api.getParameterList():
            if item.getName() in ('Language', 'Keyboard', 'Timezone_zone',
                                  'Timezone_utc', 'DbSchemaVers',
                                  'IntWebPort', 'IntWebServicePort',
                                  'WebservicePort', 'EulaAccepted',
                                  'DNSZone',):
                # Ignore any Tortuga default settings
                continue

            print('%s %s' % (item.getName(), item.getValue()))


if __name__ == '__main__':
    UcParam().run()

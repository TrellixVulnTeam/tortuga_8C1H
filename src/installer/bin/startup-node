#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

from tortuga.cli.tortugaCli import TortugaCli
from tortuga.exceptions.invalidCliRequest import InvalidCliRequest
from tortuga.node.nodeApiFactory import getNodeApi


class StartupNodeCli(TortugaCli):
    def __init__(self):
        super(StartupNodeCli, self).__init__()

        optionGroupName = _('Startup Node Options')

        self.addOptionGroup(optionGroupName, '')

        self.addOptionToGroup(
            optionGroupName, '--node',
            dest='nodeName',
            help=_('Name of node to start'))

        self.addOptionToGroup(
            optionGroupName, '--destination',
            dest='destinationString',
            help=_('List of nodes which can be the destination'))

        self.addOptionToGroup(optionGroupName, '--boot-method',
                              dest='bootMethod',
                              help=_('Boot method'))

    def runCommand(self):
        self.parseArgs(_("""
    startup-node --node=NODE --destination=PARENT[,PARENT] [--boot-method]

Description:
    The startup-node tool starts a node.
"""))

        if not self.getOptions().nodeName:
            raise InvalidCliRequest(_('Node name must be specified'))

        bootMethod = self.getOptions().bootMethod \
            if self.getOptions().bootMethod else 'n'

        # Turn user input into a list
        destinationList = [
            node.strip()
            for node in self.getOptions().destinationString.split(',')
        ] if self.getOptions().destinationString else []

        try:
            getNodeApi().startupNode(
                self.getOptions().nodeName, destinationList, bootMethod)
        except Exception as msg:
            raise InvalidCliRequest(
                _("Unable to start node(s) - %s") % (msg))


if __name__ == '__main__':
    StartupNodeCli().run()

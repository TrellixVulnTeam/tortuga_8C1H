#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

from tortuga.cli.tortugaCli import TortugaCli
from tortuga.exceptions.invalidCliRequest import InvalidCliRequest
from tortuga.node.nodeApiFactory import getNodeApi


class RevertNodeToCheckpointCli(TortugaCli):
    def __init__(self):
        super(RevertNodeToCheckpointCli, self).__init__()

        optionGroupName = _('Checkpoint Node Options')
        self.addOptionGroup(optionGroupName, '')
        self.addOptionToGroup(optionGroupName, '--node',
                              dest='nodeName',
                              metavar='NAME',
                              help=_('Name of node to revert'))

    def runCommand(self):
        self.parseArgs(_("""
    revert-node-to-checkpoint --node=NODENAME

Description:
    The revert-node-to-checkpoint tool reverts the given node
    back to the last checkpoint.

    NOTE: Both the node adapter and the storage adapter for
    the given node must support this operation.
"""))

        if not self.getOptions().nodeName:
            raise InvalidCliRequest(_('Node name must be specified'))

        nodeName = self.getOptions().nodeName

        try:
            nodeApi = getNodeApi(self.getUsername(), self.getPassword())
        except Exception as msg:
            raise InvalidCliRequest(
                _("Can't revert node [{0}] - {1}").format(nodeName, msg))

        try:
            nodeApi.revertNodeToCheckpoint(nodeName)
        except Exception as msg:
            raise InvalidCliRequest(
                _("Can't revert node [{0}] - {1}").format(nodeName, msg))


if __name__ == '__main__':
    RevertNodeToCheckpointCli().run()

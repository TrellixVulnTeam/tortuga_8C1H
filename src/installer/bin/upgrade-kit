#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
import shutil
import subprocess
import glob
from tortuga.config.configManager import ConfigManager
from tortuga.cli.tortugaCli import TortugaCli
from tortuga.kit.kitApi import KitApi
from tortuga.kit.utils import getKitNameVersionIteration, \
    format_kit_descriptor, unpack
from tortuga.kit.manager import KitManager
from tortuga.kit import kitXmlParser
from tortuga.exceptions.kitNotFound import KitNotFound
from tortuga.os_utility.osUtility import getNativeOsInfo, \
    getNativeOsFamilyInfo
from tortuga.db.dbManager import DbManager
from tortuga.db.kitsDbHandler import KitsDbHandler
from tortuga.node.nodeApi import NodeApi


class UpgradeKitCli(TortugaCli):
    """CLI to perform Tortuga kit upgrades"""

    def __init__(self):
        super(UpgradeKitCli, self).__init__(validArgCount=1)

        self.cm = ConfigManager()

        self.addOption('--force', action='store_true', default=False,
                       help='Force kit upgrade installation')

        self.addOption('--no-backup', action='store_true', default=False,
                       help='Do not backup existing kit directory')

        self.addOption('--no-puppet-sync', action='store_true',
                       default=False,
                       help='Do not run Puppet after kit upgrade')

        self.addOption('--no-confirm', action='store_true',
                       default=False,
                       help='Do not prompt for upgrade')

    def parseArgs(self):
        super(UpgradeKitCli, self).parseArgs()

        if not self.getArgs():
            self.getParser().error('Missing kit filename')

    def runCommand(self):
        self.parseArgs()

        # Steps:
        #   - validate kit version (require --force if same version)
        #   - backup current kit directory to /opt/tortuga/backup/kits
        #   - extract new kit to /opt/tortuga/kits
        #   - update database (version swap) - kit and component versions based
        #     on 'kit.xml' from newly extractedkit
        #   - run post_install kit action
        #       - this should run 'puppet module install' for any updated Puppet
        #         modules
        #   - run 'puppet agent -t' to apply sync changes
        #   - remove stale "actions" files from '/opt/tortuga/var/run/actions/Installer'

        name, version, _ = getKitNameVersionIteration(self.getArgs()[0])

        if name == 'uge':
            print('Error: UGE kit cannot be upgraded using \'upgrade-kit\'')

            sys.exit(1)

        existing_kit = self.__lookup_kit(name)

        if not self.getOptions().force and \
                existing_kit.getVersion() == version:
            print('Kit [{0}] current and upgrade versions ({1}) are the'
                  ' same.\nUse --force argument to reinstall upgrade.'.format(
                      name, version))

            sys.exit(1)

        print('Upgrading kit [{0}] from version [{1}] to [{2}]'.format(
            name, existing_kit.getVersion(), version))

        if not self.getOptions().force and not self.getOptions().no_confirm:
            print('\nDo you wish to proceed [N/y]? ', end='')

            answer = input('')

            if not answer or answer.lower().startswith('n'):
                print('Aborting upgrade...')

                sys.exit(1)

        self.__upgrade_kit(existing_kit)

    def __lookup_kit(self, name):
        """
        Raises:
            KitNotFound
        """

        kit_api = KitApi()

        for kit in kit_api.getKitList():
            if kit.getName() == name:
                return kit

        raise KitNotFound('Unable to find kit \'{0}\''.format(name))

    def __upgrade_kit(self, existing_kit):
        if not self.getOptions().no_backup:
            existing_kit_path = self.__backup(existing_kit)
            if existing_kit_path:
                # Remove existing kit directory
                print('- Removing current kit directory ([{0}])'.format(
                    existing_kit_path))
    
                shutil.rmtree(existing_kit_path)

        kit_dir = self.cm.getKitDir()

        # Remove old kit tarball
        existing_kit_tarball = glob.glob(os.path.join(kit_dir, 'kit-{0}.*'.format(
            format_kit_descriptor(existing_kit.getName(),
                                  existing_kit.getVersion(),
                                  existing_kit.getIteration()))))

        if existing_kit_tarball and os.path.exists(existing_kit_tarball[0]):
            print('- Removing existing kit tarball [{0}]'.format(existing_kit_tarball[0]))

            os.unlink(existing_kit_tarball[0])

        # Copy new kit tarball into '$TORTUGA_ROOT/kits'
        upgraded_kit_tarball = os.path.join(
            kit_dir, os.path.basename(self.getArgs()[0]))

        shutil.copyfile(self.getArgs()[0], upgraded_kit_tarball)

        # Extract new kit
        upgrade_kit_dir = unpack(upgraded_kit_tarball, kit_dir)

        upgrade_kit = kitXmlParser.parse(
            os.path.join(upgrade_kit_dir, 'kit.xml'))

        existing_components = [component.getName()
                               for component in
                               existing_kit.getComponentList()]

        upgrade_components = [component.getName()
                              for component in
                              upgrade_kit.getComponentList()]

        removed_components = set(existing_components) - set(upgrade_components)

        added_components = set(upgrade_components) - set(existing_components)

        nativeOsInfo = getNativeOsInfo()
        nativeOsFamilyInfo = getNativeOsFamilyInfo()

        if added_components:
            for component in upgrade_kit.getComponentList():
                if component.getName() not in added_components:
                    continue

                if nativeOsInfo in [c.getOsInfo()
                                    for c in component.getOsComponentList()]:
                    pass 
                    # print('TODO: create component entry [{0}] for {1}'.format(
                    #     component, nativeOsInfo))
                else:
                    for c in component.getOsFamilyComponentList():
                        if c.getOsFamilyInfo().getName() != \
                                nativeOsFamilyInfo.getName():
                            continue
    
                        if c.getOsFamilyInfo().getVersion() != \
                                nativeOsFamilyInfo.getVersion():
                            continue
    
                        # TODO: determine if component can be added to this OS
                        # print('TODO: add component [{0}]'.format(str(component)))

        if removed_components:
             pass
             #print('TODO: delete components named [{0}]'.format(removed_components))

        # Update database kit version
        print('- Updating Tortuga kit metadata')

        self.__update_database(upgrade_kit)

        print('- Removing kit/component action marker files')

        installer_swprofile = \
            NodeApi().getInstallerNode().getSoftwareProfile().getName()

        action_files = glob.glob(
            os.path.join(
                self.cm.getRoot(),
                'var/run/actions/{0}/component_{1}-*'.format(
                    installer_swprofile, existing_kit.getName())))

        for action_file in action_files:
            os.unlink(action_file)

        print('- Running kit post-install action')

        kitActions = KitManager()._KitManager__getKitActions(
            upgrade_kit, upgrade_kit_dir)

        kitActions.post_install()

        if not self.getOptions().no_puppet_sync:
            self.__puppet_sync()

    def __puppet_sync(self):
        print('- Running Puppet sync')

        result = subprocess.Popen(
            'puppet agent --onetime --no-daemonize --verbose'
            ' --detailed-exitcodes', shell=True).wait()

        if result not in (0, 2):
            print('Error: \'puppet agent\' failed (rc={0:d})'.format(result))

            print('Check Puppet output in /var/log/messages')

            sys.exit(1)

    def __backup(self, kit):
        """
        Backup existing kit directory to /opt/tortuga/backup/kits

        Raises:
            TortugaException (TODO)
        """

        kit_dir = format_kit_descriptor(
            kit.getName(), kit.getVersion(), kit.getIteration())

        kit_path = '{}/kit-{}'.format(self.cm.getKitDir(), kit_dir)

        if not os.path.exists(kit_path):
            # TODO: raise a proper exception here
            # raise Exception('Kit directory [{0}] not found'.format(kit_path))

            return None

        # print(kit_path)

        kit_backup_dir = os.path.join(self.cm.getRoot(), 'backup', 'kits')

        # dstdir = os.path.join(kit_backup_dir, kit_dir + datetime.datetime.utcnow().strftime('%s'))

        dstdir = os.path.join(kit_backup_dir, kit_dir)

        if not os.path.exists(kit_backup_dir):
            os.makedirs(kit_backup_dir)

        print('- Backing up [{0}] to [{1}]'.format(kit_path, dstdir))

        cmd = 'rsync --archive {0}/ {1}'.format(kit_path, dstdir)

        p = subprocess.Popen(cmd, shell=True)
        result = p.wait()

        if result != 0:
            print('Copy failed (rc={0:d})'.format(result))

            print('Error copying [{0}] to [{1}]. Unable to proceed'.format(
                kit_path, dstdir))

            sys.exit(1)

        return kit_path

    def __get_kit_by_name(self, session, name):
        """
        Iterate over all installed kits to find kit by name

        Raises:
            KitNotFound
        """

        for kit in KitsDbHandler().getKitList(session):
            if kit.name == name:
                return kit
        else:
            raise KitNotFound('Unable to find kit [{0}]'.format(name))

    def __update_database(self, upgrade_kit):
        """
        Raises:
            KitNotFound
        """

        with DbManager().session() as session:
            kit = self.__get_kit_by_name(session, upgrade_kit.getName())
            kit.version = upgrade_kit.getVersion()
            kit.iteration = upgrade_kit.getIteration()

            session.commit()


if __name__ == '__main__':
    UpgradeKitCli().run()

#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

import sys
import yaml

from tortuga.node import nodeApiFactory
from tortuga.cli.tortugaCli import TortugaCli
from tortuga.hardwareprofile import hardwareProfileFactory


class GetProvisioningNicsApp(TortugaCli):
    def __init__(self):
        TortugaCli.__init__(self)

        self.addOption('--hardware-profile', dest='hardwareProfile',
                       help=('Return provisioning NIC for specified'
                             'hardware profile'))

        self.addOption('--yaml', dest='bYaml', action='store_true',
                       default=False, help='Output in YAML')

        self.addOption('--verbose', dest='bVerbose', action='store_true',
                       default=False, help='Enable verbose mode')

    def runCommand(self):
        self.parseArgs('''%prog''')

        if self.getArgs().hardwareProfile:
            hwProfileApi = hardwareProfileFactory.getHardwareProfileApi()

            hwProfile = hwProfileApi.getHardwareProfile(
                self.getArgs().hardwareProfile, {
                    'hardwareprofilenetworks': True
                })

            if not hwProfile.getProvisioningNics():
                print(yaml.dump({}))

                sys.exit(0)

            nic = hwProfile.getProvisioningNics()[0]

            dataDict = {
                'device': nic.getNetworkDevice().getName(),
                'ip': nic.getIp(),
                'network': {
                    'address': nic.getNetwork().getAddress(),
                    'netmask': nic.getNetwork().getNetmask()
                }
            }

            if self.getArgs().bVerbose:
                print(yaml.safe_dump(dataDict))
            else:
                print(yaml.safe_dump(nic.getNetworkDevice().getName()))
        else:
            # Display list of provisioning NICs on installer
            nodeApi = nodeApiFactory.getNodeApi()

            dataDict = {}

            for nic in nodeApi.getInstallerNode().getNics():
                if nic.getNetwork().getType() != 'provision':
                    continue

                deviceName = nic.getNetworkDevice().getName()

                dataDict[deviceName] = {}

                if self.getArgs().bVerbose:
                    dataDict[deviceName] = {
                        'ip': nic.getIp(),
                        'network': {
                            'address': nic.getNetwork().getAddress(),
                            'netmask': nic.getNetwork().getNetmask()
                        }
                    }

            if self.getArgs().bVerbose:
                print(yaml.safe_dump(dataDict))
            else:
                print(yaml.safe_dump(list(dataDict.keys())))


if __name__ == '__main__':
    GetProvisioningNicsApp().run()

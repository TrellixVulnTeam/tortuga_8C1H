#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

from tortuga.cli.tortugaCli import TortugaCli
from tortuga.exceptions.invalidCliRequest import InvalidCliRequest
from tortuga.softwareprofile.softwareProfileFactory import getSoftwareProfileApi


class addDatastoreCli(TortugaCli):
    def __init__(self):
        TortugaCli.__init__(self)

        # Define command line options
        self.addOption(
            '', '--software-profile', dest='softwareProfileName',
            help=_('Software profile where datastore will be attached'))

        self.addOption(
            '', '--label', dest='label',
            help=_('Label to assign to this datastore'))

        self.addOption(
            '', '--host', dest='hostName',
            help=_('Host where datastore resides'))

        self.addOption(
            '', '--directory', dest='directory',
            help=_('Directory on host where datastore resides'))

    def runCommand(self):
        self.parseArgs('''
    add-datastore --software-profile=SOFTWAREPROFILE --label=LABEL --host=HOSTNAME --directory=DIRECTORY

Description:

    The add-datastore command adds a datastore to the hypervisors under the given
    software profile. A datastore is a location where virtual machine information can
    be stored by a hypervisor.

    Datastores differ from volumes in that volumes are disks which are directly or
    indirectly mounted on a node. Datastores, on the other hand, are storage locations
    where hypervisors store virtual disks, virtual BIOS settings, etc.

    While a volume can be connected to any node (including a hypervisor) to provide
    general storage just like adding a physical hard disk to a machine, datastores
    may only be connected to a hypervisor, and are not directly visible to the virtual
    machines running on that hypervisor.

    The datastore location must be a directory which can be mounted via NFS and is
    exported using the 'no_root_squash' option.

    Datastores may be examined using the get-datastore-list command, and removed
    using the remove-datastore command.
''')

        # Get command line options
        options = self.getOptions()

        # Check for required parameters
        if not options.softwareProfileName:
            raise InvalidCliRequest('You must specify a software profile name')

        if not options.label:
            raise InvalidCliRequest('You must specify a datastore label')

        if not options.hostName:
            raise InvalidCliRequest(
                'You must specify the name of the host where the datastore'
                ' resides')

        if not options.directory:
            raise InvalidCliRequest(
                'You must specify the directory on the host where the datastore'
                ' resides')

        # Check for optional parameters
        # No optional paramters exist for this command

        # ! ! ! Temporary version of this command ! ! !
        # ! ! ! ! Uses resource adapter directly  ! ! !

        # Get options
        softwareProfileName = options.softwareProfileName
        label = options.label
        hostName = options.hostName
        directory = options.directory

        # TODO: check that softwareprofile is an ESX one
        getSoftwareProfileApi().getSoftwareProfile(softwareProfileName)

        # Grab resource adapter
        from tortuga.resourceAdapter.vmware_adapter import Vmware_adapter
        resourceAdapter = Vmware_adapter()

        # Attempt to add datastore
        resourceAdapter.addDatastore(
            softwareProfileName, label, hostName, directory)

        # print 'Added datastore to %s nodes' % numAdded


if __name__ == '__main__':
    addDatastoreCli().run()

#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

from tortuga.cli.tortugaCli import TortugaCli
from tortuga.softwareprofile.softwareProfileFactory \
    import getSoftwareProfileApi
from tortuga.exceptions.invalidCliRequest import InvalidCliRequest


class SetIdleStateCli(TortugaCli):
    """
    Set idle software profile idle state command line interface.
    """
    def __init__(self):
        TortugaCli.__init__(self)
        idleStateAttrGroup = \
            _('Set Idle Software Profile State Attribute Options')
        self.addOptionGroup(
            idleStateAttrGroup, _('Software profile must be specified.'))
        self.addOptionToGroup(idleStateAttrGroup, '--software-profile',
                              dest='swprofile',
                              help=_('software profile name'))
        self.addOptionToGroup(idleStateAttrGroup, '--state',
                              dest='idleState',
                              help=_('software profile idle state'))

    def runCommand(self):
        self.parseArgs(_("""
    set-idle-state --swprofile=SWPROFILE --state={ true | false }

Description:
    The set-idle-state tool configures the "idle" attribute of a software
    profile.
"""))
        swprofile = self.getArgs().swprofile
        if not swprofile:
            raise InvalidCliRequest(
                _('Software profile name must be specified'))

        idleState = self.getArgs().idleState
        if not idleState:
            raise InvalidCliRequest(_('Idle state must be specified'))

        if idleState in ('True', 'true'):
            idleState = True
        elif idleState in ('False', 'false'):
            idleState = False
        else:
            raise InvalidCliRequest(_('Idle state must be True or False'))

        api = getSoftwareProfileApi(self.getUsername(), self.getPassword())

        api.setIdleState(swprofile, idleState)


if __name__ == '__main__':
    SetIdleStateCli().run()

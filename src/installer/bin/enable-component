#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

from tortuga.puppet import Puppet
from tortuga.kit.kitCli import KitCli
from tortuga.node import nodeApiFactory
from tortuga.softwareprofile.softwareProfileFactory \
    import getSoftwareProfileApi


class EnableComponent(KitCli):
    def __init__(self):
        super(EnableComponent, self).__init__(validArgCount=2)

        self.addOption('--software-profile', dest='softwareProfileName',
                       help=_('Software profile to enable component on'))

        self.addOption(
            '-p',
            dest='applyToInstaller', action='store_true',
            default=False,
            help=_('Shortcut for \'--software-profile Installer\'')
        )

        self.addOption('--kit-name', dest='kitName',
                       help=_('kit name'))
        self.addOption('--kit-version', dest='kitVersion',
                       help=_('kit version'))
        self.addOption('--kit-iteration', dest='kitIteration',
                       help=_('kit iteration'))
        self.addOption('--comp-name', dest='compName',
                       help=_('component name'))
        self.addOption('--comp-version', dest='compVersion',
                       help=_('component version'))
        self.addOption('--no-sync', dest='sync', action='store_false',
                       default=True, help=_('component version'))

    def runCommand(self):
        self.parseArgs('''
    enable-component --software-profile=SWPROFILENAME --kit-name=KITNAME
       --kit-version=KITVER --kit-iteration=KITITER --comp-name=COMPNAME
       --comp-version=COMPVER

    enable-component --software-profile=SWPROFILENAME
       KITNAME-KITVER-KITITER COMPNAME-COMPVER

   Enable component on software profile of installer:

   enable-component -p --kit-name=KITNAME --kit-version=KITVER
       --kit-iteration=KITITER --comp-name=COMPNAME --comp-version=COMPVER

    enable-component -p [KITNAME-KITVER-KITITER] COMPNAME[-COMPVER]

Description:
    The enable-component tool is used to create an association between  a
    component and a software profile.  After running enable-component and
    puppet agent, the components software should be installed on  the
    machines belonging to the specified software profile.

Examples:
    These two examples are equivalent:

    enable-component --software-profile DefaultCompute ganglia-3.0.7-1 \
component-ganglia-gmond-3.0.7

    enable-component --software-profile DefaultCompute --kit-name ganglia \
--kit-version 3.0.7 --kit-iteration 1 --comp-name component-ganglia-gmond \
--comp-version 3.0.7
''')

        if self.getNArgs() == 1 and '-' not in self.getArg(0):
            # The first argument is assumed to be the component name.
            compname = self.getArg(0)

            kitName = self.getArgs().kitName
            kitVersion = self.getArgs().kitVersion
            kitIteration = self.getArgs().kitIteration
        else:
            # Get given Kit information
            pkgname = None
            if self.getNArgs() >= 1:
                pkgname = self.getArg(0)

            kitName, kitVersion, kitIteration = \
                self.getKitNameVersionIteration(pkgname)

            # Get given Component information
            compname = None
            if self.getNArgs() >= 2:
                vals = self.getArg(1).rsplit('-', 1)
                compname = vals[0]

            if not compname:
                self.usage(_('Missing component name'))

        # Get the given software profile information
        softwareProfileName = self.__get_software_profile_name()

        if not softwareProfileName:
            self.usage(_('Missing --software-profile option'))

        api = getSoftwareProfileApi(self.getUsername(), self.getPassword())

        api.enableComponent(
            softwareProfileName, kitName, kitVersion, kitIteration, compname)

        if self.getArgs().sync:
            Puppet().agent()

    def __get_software_profile_name(self):
        """
        Returns software profile name based on command-line arguments or None,
        if not provided.
        """

        if self._options.applyToInstaller:
            nodeApi = nodeApiFactory.getNodeApi()

            node = nodeApi.getInstallerNode(optionDict={
                'softwareprofile': True,
            })

            return node.getSoftwareProfile().getName()

        return self._options.softwareProfileName


if __name__ == '__main__':
    EnableComponent().run()

#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

import sys

from tortuga.cli.tortugaCli import TortugaCli
from tortuga.db.dbManager import DbManager
from tortuga.db.kitSources import KitSources
from tortuga.db.softwareProfiles import SoftwareProfiles
from tortuga.exceptions.invalidArgument import InvalidArgument


class RemoteRepoEnableApp(TortugaCli):
    def runCommand(self):
        self.addOption('--software-profile', dest='softwareProfile')
        self.addOption('--repo-id', type='int', dest='repoId')

        self.parseArgs()

        if not self.getOptions().softwareProfile:
            raise InvalidArgument('Missing --software-profile argument')

        if not self.getOptions().repoId:
            raise InvalidArgument('Missing --repo-id argument')

        # Find matching kit source
        session = DbManager().openSession()

        try:
            dbKitSource = session.query(KitSources).filter(
                KitSources.id == self.getOptions().repoId).one()

            # Find matching software profile
            dbSoftwareProfile = session.query(SoftwareProfiles).filter(
                SoftwareProfiles.name ==
                self.getOptions().softwareProfile).one()

            if dbKitSource in dbSoftwareProfile.kitsources:
                print((
                    'Kit source [%d] already enabled on'
                    ' software profile [%s]' % (
                        dbKitSource.id, dbSoftwareProfile.name)))

                sys.exit(1)

            # Find enabled kits
            dbKits = set(
                [dbComponent.kit
                 for dbComponent in dbSoftwareProfile.components])

            if dbKitSource.kit not in dbKits:
                print((
                    'Components from kit [%s] not enabled on'
                    ' software profile [%s]' % (
                        dbKitSource.kit.name,
                        self.getOptions().softwareProfile)))

                sys.exit(1)

            dbSoftwareProfile.kitsources.append(dbKitSource)

            session.commit()
        finally:
            DbManager().closeSession()


def main():
    RemoteRepoEnableApp().run()


if __name__ == '__main__':
    main()

#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

from tortuga.cli.tortugaCli import TortugaCli
from tortuga.exceptions.invalidCliRequest import InvalidCliRequest
from tortuga.node.nodeApiFactory import getNodeApi


class ShutdownNodeCli(TortugaCli):
    def __init__(self):
        super(ShutdownNodeCli, self).__init__()

        optionGroupName = _('Shutdown Node Options')
        self.addOptionGroup(optionGroupName, '')
        self.addOptionToGroup(optionGroupName, '--node',
                              dest='nodeName',
                              help=_('Name of node to shutdown'))

    def runCommand(self):
        self.parseArgs(_("""
    shutdown-node --node=NODENAME

Description:
    Shuts down the given node.
"""))

        if not self.getOptions().nodeName:
            raise InvalidCliRequest(_('Node name must be specified'))

        try:
            # Perform a "soft" shutdown
            getNodeApi().shutdownNode(self.getOptions().nodeName, True)
        except Exception as msg:
            raise InvalidCliRequest(
                _("Can't shutdown node(s) - %s") % (msg))


if __name__ == '__main__':
    ShutdownNodeCli().run()

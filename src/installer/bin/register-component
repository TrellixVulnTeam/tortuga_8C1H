#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

from tortuga.cli.tortugaCli import TortugaCli
from tortuga.kit import kitApiFactory
from tortuga.exceptions.invalidArgument import InvalidArgument
from tortuga.db.kitDbApi import KitDbApi
from tortuga.objects.osFamilyComponent import OsFamilyComponent
from tortuga.helper.osHelper import getOsInfo


class RegisterComponentCli(TortugaCli):
    def __init__(self):
        super(RegisterComponentCli, self).__init__()

        self.addOption('--kit',
                       help='(optional) Kit containing specified component')

        self.addOption('--component',
                       help='Component to register specified operating system'
                            ' for')

        self.addOption('--os',
                       metavar='NAME-VERSION-ARCH',
                       help='Operating system to register component for')

    def __get_components(self, kits): \
            # pylint: disable=no-self-use
        return [comp for kit in kits for comp in kit.getComponentList()]

    def __get_matching_components(self, component_name, components): \
            # pylint: disable=no-self-use
        return [comp for comp in components
                if comp.getName() == component_name]

    def runCommand(self):
        self.parseArgs()

        if not self.getArgs().component or not self.getArgs().os:
            self.getParser().error(
                'At least --component and --os options must be specified')

        # Find the specified component, ignoring the version
        component_name = self.getArgs().component.split('-', 1)[0]

        kit_name = self.getArgs().kit.split('-', 3)[0] \
            if self.getArgs().kit else None

        kits = [kit for kit in kitApiFactory.getKitApi().getKitList()
                if not kit_name or (kit_name and kit_name == kit.getName())]

        matching_components = self.__get_matching_components(
            component_name, self.__get_components(kits))

        if not matching_components:
            raise InvalidArgument(
                'Component [%s] does not exist' % (component_name))

        if len(matching_components) > 1:
            raise InvalidArgument(
                'Ambiguous component name [%s] (component exists in multiple'
                ' kits), use --kit option' % (component_name))

        try:
            os_family_name, os_family_version, os_family_arch = \
                self.getArgs().os.split('-', 3)
        except ValueError:
            self.getParser().error(
                'Malformed --os argument. Must be in form NAME-VERSION-ARCH')

        # Get OsInfo object representing specified OS
        osinfo = getOsInfo(os_family_name, os_family_version, os_family_arch)

        # Create mapping from Component to OsFamilyInfo
        osFamilyComponent = OsFamilyComponent(osinfo.getOsFamilyInfo())
        matching_components[0].setOsFamilyComponentList([osFamilyComponent])

        # Add mapping association to kit
        KitDbApi().addComponentsToKit(kits[0], [matching_components[0]])


if __name__ == '__main__':
    RegisterComponentCli().run()

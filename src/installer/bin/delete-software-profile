#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

from tortuga.cli.tortugaCli import TortugaCli
from tortuga.exceptions.invalidCliRequest import InvalidCliRequest
from tortuga.exceptions import softwareProfileNotFound


class DeleteSoftwareProfileCli(TortugaCli):
    def __init__(self):
        super(DeleteSoftwareProfileCli, self).__init__()

        optionGroupName = _('Delete Software Profile Options')
        self.addOptionGroup(optionGroupName, '')
        self.addOptionToGroup(optionGroupName, '--name',
                              dest='softwareProfileName',
                              help=_('Name of software profile to delete'))

    def runCommand(self):
        self.parseArgs(_("""
    delete-software-profile --name=NAME

Description:
    The delete-software-profile tool removes a software profile  from  the
    system.   There  can not be any nodes currently assigned to the soft-
    ware profile for it be successfully removed.
"""))

        if not self.getOptions().softwareProfileName:
            raise InvalidCliRequest(
                _('Software profile name must be specified'))

        from tortuga.softwareprofile.softwareProfileFactory \
            import getSoftwareProfileApi
        softwareProfileApi = getSoftwareProfileApi(self.getUsername(),
                                                   self.getPassword())
        try:
            softwareProfileApi.deleteSoftwareProfile(
                self.getOptions().softwareProfileName)
        except softwareProfileNotFound.SoftwareProfileNotFound:
            print(_('Software profile [%s] not found' % (
                self.getOptions().softwareProfileName)))


if __name__ == '__main__':
    DeleteSoftwareProfileCli().run()

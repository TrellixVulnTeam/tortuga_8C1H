#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

import sys
from typing import Any, Optional, Dict, List
from tortuga.wsapi.nodeWsApi import NodeWsApi
from tortuga.cli.tortugaCli import TortugaCli
from tortuga.exceptions.invalidCliRequest import InvalidCliRequest
from tortuga.cli.utils import FilterTagsAction


class GetNodeStatus(TortugaCli): \
        # pylint: disable=too-few-public-methods
    def __init__(self):
        super(GetNodeStatus, self).__init__()

        self.addOption(
            '-n', '--node',
            dest='nodeName',
            help=_('Output the status of the given node.'))

        self.addOption(
            '--by-hwprofile',
            dest='bByHardwareProfile',
            action='store_true',
            default=False,
            help=_('Display node list by hardware profile'
                   ' (default is by software profile)'))

        self.addOption(
            '--active',
            dest='bActiveNodesOnly',
            action='store_true',
            help=_('Display only active nodes'))

        self.addOption(
            '--idle',
            dest='bIdleNodesOnly',
            action='store_true',
            help=_('Display only idle nodes'))

        self.addOption(
            '--installed',
            dest='bInstalled',
            action='store_true',
            help=_('Display only nodes that are in \'Installed\' state')
        )

        self.addOption(
            '--not-installed',
            dest='bNotInstalled',
            action='store_true',
            help=_('Display only nodes that are not in \'Installed\' state')
        )

        self.addOption(
            '--state',
            help=_('Filter nodes in specified state'))

        self.addOption(
            '--software-profile',
            dest='softwareProfile',
            help=_('Display only nodes in specified software profile')
        )

        self.addOption(
            '--hardware-profile',
            dest='hardwareProfile',
            help=_('Display only nodes in specified hardware profile')
        )

        self.addOption(
            '-s', '--short',
            dest='bShortOutput',
            action='store_true',
            help=_('Display short form output'),
        )

        self.addOption(
            '-l', '--list',
            dest='bListOutput',
            action='store_true',
            help=_('Display host names one per line'),
        )

        self.addOption(
            '--tag',
            action=FilterTagsAction,
            dest='tags',
            help=_('Filter results by specified tag(s) (comma-separated)'),
        )

    def runCommand(self):
        self.parseArgs("""
    get-node-status [--list] [--active|--idle] [--by-hwprofile]
    get-node-status [options] [--node=NAME]

    'get-node-list' is a shell alias for 'get-node-status --list [options]'

Description:
    The get-node-status tool displays the status of nodes known to Tortuga.

    If the '--node option' is not given, the status for all nodes is displayed.

    --active will display only active nodes.

     --idle will display only idle nodes.

    --by-hwprofile sorts by hardware profile (default is to sort by
    software profile)
""")

        options = self.getArgs()

        if options.bActiveNodesOnly and options.bIdleNodesOnly:
            raise InvalidCliRequest('--active and --idle cannot be specified together')

        if options.bNotInstalled and options.bInstalled:
            raise InvalidCliRequest('--installed and --not-installed cannot be specified together')

        if options.state and (options.bNotInstalled or options.bInstalled):
            raise InvalidCliRequest(
                '--state and --installed/--not-installed arguments are'
                ' mutually excluive'
            )

        api = NodeWsApi(self.getUsername(), self.getPassword())

        if options.nodeName:
            nodes: List[Dict[str, Any]] = [api.getNodeDetails(options.nodeName)]
        else:
            nodes: List[Dict[str, Any]] = api.getNodeList(options.tags)

        output: Optional[str] = self.__make_output(nodes)

        if not output:
            if options.nodeName:
                print('No nodes matching nodespec [{}]\n'.format(options.nodeName))
            sys.exit(1)

        print(output)

    def __make_output(self, nodes: List[Dict[str, Any]]) -> Optional[str]:
        """
        Take a list of node names
        and return a formatted string
        to print.

        :param nodes: List String
        :return: String
        """
        output: str = ''

        for node in nodes:
            output += """
{}
    Hardware Profile: {}
    Boot: {}
    Status: {}/{}, Locked: {}
            """.format(
                node['name'],
                node['hardwareprofile']['name'],
                node['bootFrom'],  # TODO enumerate value.
                node['state'], node[''],  # TODO get 'Active' state.
                node['lockedState']
            )

        return output


if __name__ == '__main__':
    GetNodeStatus().run()

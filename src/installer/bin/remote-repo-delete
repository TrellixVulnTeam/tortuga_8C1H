#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

from tortuga.db.dbManager import DbManager
from tortuga.db.kitSources import KitSources
from tortuga.cli.tortugaCli import TortugaCli
from tortuga.exceptions.invalidArgument import InvalidArgument


class RemoteRepoDeleteApp(TortugaCli):
    def runCommand(self):
        self.addOption('--kit', dest='kitspec')
        self.addOption('--repo-id', dest='repoId')
        self.addOption('--url', dest='url')
        self.addOption('--force', dest='force', action='store_true',
                       default=False)

        self.parseArgs()

        if self.getArgs().repoId and self.getArgs().url:
            raise InvalidArgument(
                '--repo-id must not be specified with --url')

        if not self.getArgs().repoId and not self.getArgs().url:
            raise InvalidArgument(
                'One of --repo-id or --url must be specified')

        session = DbManager().openSession()

        if self.getArgs().url:
            dbKitSource = session.query(KitSources).filter(
                KitSources.url == self.getArgs().url).one()
        else:
            dbKitSource = session.query(KitSources).filter(
                KitSources.id == self.getArgs().repoId).one()

        if not self.getArgs().force and dbKitSource.softwareprofiles:
            print((
                'Kit source [%s] (%s) in use by software profile(s):'
                '\n\n%s' % (
                    dbKitSource.id,
                    dbKitSource.url,
                    ' '.join([dbSoftwareProfile.name
                              for dbSoftwareProfile in
                              dbKitSource.softwareprofiles]))))

            print()

            print('Use --force to remove kit source')

        session.delete(dbKitSource)

        session.commit()

        DbManager().closeSession()


def main():
    RemoteRepoDeleteApp().run()


if __name__ == '__main__':
    main()

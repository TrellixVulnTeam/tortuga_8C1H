#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=no-member

from tortuga.cli.tortugaCli import TortugaCli
from tortuga.softwareprofile.softwareProfileFactory \
    import getSoftwareProfileApi
from tortuga.resourceAdapter.vmware_adapter import Vmware_adapter


class GetDatastoreCli(TortugaCli):
    def __init__(self):
        TortugaCli.__init__(self)

        # Define command line options
        self.addOption(
            '--software-profile', dest='softwareProfileName',
            help=_('Software profile from which to display datastores'))

    def maxStrLen(self, stringList): \
            # pylint: disable=no-self-use
        '''Returns max length out of the provided list of strings'''
        return max([len(s) for s in stringList])

    def runCommand(self):

        self.parseArgs('''
    get-datastore-list --software-profile=SOFTWAREPROFILE

Description:

    The get-datastore-list command shows the datastores attached to the hypervisors
    under the given software profile. A datastore is a location where virtual machine
    information can be stored by a virtual machine manager.

    Datastores differ from volumes in that volumes are disks which are directly or
    indirectly mounted on a node. Datastores, on the other hand, are storage locations
    where hypervisors store virtual disks, virtual BIOS settings, etc.

    While a volume can be connected to any node (including a hypervisor) to provide
    general storage just like adding a physical hard disk to a machine, datastores
    may only be connected to a hypervisor, and are not directly visible to the virtual
    machines running on that hypervisor.

    If a datastore shows as "No" in the Sync column, this means that at least one
    hypervisor is not attached to that datastore. To correct this situation, simply
    run the add-datastore command as if adding that datastore for the first time.

    Synchronization can be lost in some cases if you attempt to delete a datastore
    which has active virtual machines stored in it, or if you use an external manager
    console (non-Tortuga) to manage datastores.

    Datastores may be added using the add-datastore command, and removed using the
    remove-datastore command.
''')

        # Check for required parameters
        if not self.getOptions().softwareProfileName:
            from tortuga.exceptions.invalidCliRequest import InvalidCliRequest
            raise InvalidCliRequest('You must specify a Software Profile name')

        # Check for optional parameters
        # No optional paramters exist for this command

        # ! ! ! Temporary version of this command ! ! !
        # ! ! ! ! Uses resource adapter directly  ! ! !

        # Check that softwareprofile is an ESX one

        nodes = getSoftwareProfileApi().getNodeList(
            self.getOptions().softwareProfileName)

        # Grab resource adapter
        resourceAdapter = Vmware_adapter()

        # Go through each node, get datastores, and construct a list of which
        # nodes have what datastores
        datastoreList = {}

        for node in nodes:
            datastores = resourceAdapter.getDatastores(node.getName())

            for store in list(datastores.keys()):
                if store in datastoreList:
                    datastoreList[store]['nodes'].append(node.getName())
                else:
                    datastoreList[store] = {}
                    datastoreList[store]['nodes'] = [node.getName()]
                    datastoreList[store]['directory'] = \
                        datastores[store]['directory']
                    datastoreList[store]['host'] = datastores[store]['host']

        # Print out information in readable format
        print('\nNumber of nodes in this software profile: %s' % (len(nodes)))

        print('\nThe following datastores are attached to this profile:')

        col1 = max(len('Label'),
                   self.maxStrLen([datastore for datastore in datastoreList]))
        col2 = max(len('Host'),
                   self.maxStrLen([datastoreList[datastore]['host']
                                   for datastore in datastoreList]))
        col3 = max(len('Directory'),
                   self.maxStrLen([datastoreList[datastore]['directory']
                                   for datastore in datastoreList]))
        col4 = len('Sync')

        syncList = []

        print('\n%-*s  %-*s  %-*s  %-*s' % (
            col1, 'Label', col2, 'Host', col3, 'Directory', col4, 'Sync'))

        print('-' * (col1 + col2 + col3 + col4 + 6))

        for datastore in datastoreList:
            sync = len(datastoreList[datastore]['nodes']) == len(nodes)

            if not sync:
                syncList.append(datastore)

            print('%-*s  %-*s  %-*s  %-*s' % (
                col1, datastore, col2, datastoreList[datastore]['host'], col3,
                datastoreList[datastore]['directory'], col4,
                'Yes' if sync else 'No'))

        if not syncList:
            print('\nAll datastores are synchronized\n')
        else:
            print ('\nYour datastores need to be synchronized using these'
                   ' commands:')

            for sync in syncList:
                print(('  add-datastore --software-profile %s --label %s'
                       ' --host %s --directory %s\n' % (
                           self.getOptions().softwareProfileName, sync,
                           datastoreList[sync]['host'],
                           datastoreList[sync]['directory'])))

            print()


if __name__ == '__main__':
    GetDatastoreCli().run()
